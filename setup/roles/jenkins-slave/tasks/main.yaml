- name: Install required packages
  apt:
    name: "{{ required_pkgs }}"
    state: present
    update_cache: yes

- name: Install pip packages for aws
  pip:
    name: awscli
    executable: pip3
  when: "'aws' in group_names"

- name: Install pip packages for vexx
  pip:
    name:
      - python-openstackclient
      - python-novaclient
    executable: pip3
  when: "'vexxhost' in group_names"

- name: Add user jenkins
  user:
    name: "{{ jenkins_user }}"
    shell: "/bin/bash"

- name: Make ~/.ssh directory
  file:
    path: /home/{{ jenkins_user }}/.ssh
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_user }}"
    mode: "0700"
    state: directory

- name: Creating a keypair for connecting slaves
  openssh_keypair:
    path: "{{ playbook_dir }}/jenkins_id_ssh_rsa"
  register: keypair
  when: jenkins_new_deploy
  delegate_to: localhost
  become: no

- name: Append string to list
  set_fact:
    jenkins_ssh_pubkeys: "{{ [keypair.public_key] + jenkins_ssh_pubkeys }}"
  when: jenkins_new_deploy

- name: Add trusted ssh pubkeys to jenkins authorized_keys file
  blockinfile:
    dest: /home/{{ jenkins_user }}/.ssh/authorized_keys
    create: yes
    marker: "# {mark} Ansible managed default keys"
    block: |
      {% for key in jenkins_ssh_pubkeys %}
      {{ key }}
      {% endfor %}
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_user }}"
    mode: "0600"

- name: Ensure group "docker" exists
  group:
    name: docker
    state: present

- name: adding existing user jenkins to group docker
  user:
    name: jenkins
    groups: docker
    append: yes

- name: Add user "ansibleuser" to sudo
  lineinfile:
    path: /etc/sudoers.d/91-jenkins
    line: 'jenkins ALL=(ALL) NOPASSWD: /usr/bin/docker'
    state: present
    mode: 0440
    create: yes
    validate: 'visudo -cf %s'

- name: check if packer exists
  stat:
    path: /usr/local/bin/packer
    get_checksum: no
  register: packer_state

- name: check if rules file exists
  command: "/usr/local/bin/packer --version"
  register: packer_version
  ignore_errors: True

- name: Create temporary download directory
  tempfile:
    state: directory
  register: download_dir
  when: (packer_state.stat.exists == False) or (packer_version.stdout != packer_ver)

- name: Download packer
  get_url:
    url: https://releases.hashicorp.com/packer/{{packer_ver}}/packer_{{packer_ver}}_linux_amd64.zip
    dest: "{{download_dir.path}}/packer_{{packer_ver}}_linux_amd64.zip"
  when: (packer_state.stat.exists == False) or (packer_version.stdout != packer_ver)

- name: Unarchive a file that is already on the remote machine
  unarchive:
    src: "{{download_dir.path}}/packer_{{packer_ver}}_linux_amd64.zip"
    dest: /usr/local/bin
    remote_src: yes
  when: (packer_state.stat.exists == False) or (packer_version.stdout != packer_ver)
