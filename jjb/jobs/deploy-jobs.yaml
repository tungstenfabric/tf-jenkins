---

- job-template:
    name: deploy-platform-{project}
    description: "devstack deploy platform for {project}"
    defaults: global
    parameters:
      - label:
          name: NODE_NAME
      - string:
          name: STREAM
      - string:
          name: JOB_RND
      - string:
          name: PIPELINE_NAME
      - string:
          name: PIPELINE_NUMBER
    wrappers:
      - workspace-cleanup:
          disable-deferred-wipeout: true
      - timestamps
      - credentials-binding:
          - ssh-user-private-key:
              credential-id: worker
              key-file-variable: WORKER_SSH_KEY
              username-variable: WORKER_USER_NAME
              passphrase-variable: WORKER_PASSPHRASE
      - credentials-binding:
          - ssh-user-private-key:
              credential-id: logs_host
              key-file-variable: LOGS_HOST_SSH_KEY
              username-variable: LOGS_HOST_USERNAME
      - credentials-binding:
          - text:
              credential-id: OS_USERNAME
              variable: OS_USERNAME
          - text:
              credential-id: OS_PROJECT_ID
              variable: OS_PROJECT_ID
          - text:
              credential-id: OS_PASSWORD
              variable: OS_PASSWORD
          - text:
              credential-id: OS_DOMAIN_NAME
              variable: OS_USER_DOMAIN_NAME
          - text:
              credential-id: OS_DOMAIN_NAME
              variable: OS_PROJECT_DOMAIN_NAME
          - text:
              credential-id: OS_AUTH_URL
              variable: OS_AUTH_URL
        #   - username-password-separated:
        #       credential-id: rhel-creds
        #       username: RHEL_USER
        #       password: RHEL_PASSWORD
        #   - text:
        #       credential-id: MAAS_API_KEY
        #       variable: MAAS_API_KEY
    scm:
      - tf-jenkins
      - tf-devstack
    builders:
      - copyartifact:
          project: ${{PIPELINE_NAME}}
          filter: "global.env,*.$JOB_RND.env,patchsets-info.json"
          which-build: upstream-build
      - shell: |
          source "$WORKSPACE/global.env"
          desc="Pipeline: ${{PIPELINE_NAME}}-$PIPELINE_NUMBER    Random: ${{JOB_RND}}  Stream: ${{STREAM}}"
          desc+="<br>Job logs: <a href=\"${{LOGS_URL}}/${{STREAM}}\">${{LOGS_URL}}/${{STREAM}}</a>"
          echo "DESCRIPTION $desc"
      - description-setter:
          regexp: "DESCRIPTION (.*)"
      - shell: |
          set -eo pipefail
          source "$WORKSPACE/global.env"
          ./src/opensdn-io/tf-jenkins/infra/gerrit/apply_patchsets.sh ./src tungstenfabric/tf-jenkins ./patchsets-info.json
          ./src/opensdn-io/tf-jenkins/infra/gerrit/apply_patchsets.sh ./src tungstenfabric/tf-devstack ./patchsets-info.json
      - shell: |
          set -eo pipefail
          export ENVIRONMENT_OS={environment_os}
          export ORCHESTRATOR={orchestrator}
          source "$WORKSPACE/global.env"
          source "${{WORKSPACE}}/deps.${{JOB_NAME}}.${{JOB_RND}}.env" || /bin/true
          source "${{WORKSPACE}}/vars.${{JOB_NAME}}.${{JOB_RND}}.env" || /bin/true

          res=0
          # do exit later when all context will be saved to env_file
          ./src/opensdn-io/tf-jenkins/jobs/devstack/{deployer}/create_workers.sh || res=1
          # add more information about current deployment for deploy-tf job
          ENV_FILE="$WORKSPACE/stackrc.$JOB_NAME.env"
          echo "export ORCHESTRATOR=$ORCHESTRATOR" >> "$ENV_FILE"
          echo "export DEPLOYER={deployer}" >> "$ENV_FILE"
          echo "export JOB_LOGS_PATH=${{STREAM}}" >> "$ENV_FILE"
          if [[ $res == 1 ]]; then
            echo "ERROR: workers creation failed"
            exit 1
          fi
          source "$WORKSPACE/stackrc.$JOB_NAME.env"
          source ./src/opensdn-io/tf-jenkins/infra/${{SLAVE}}/definitions

          export FULL_LOGS_PATH="$LOGS_PATH/$JOB_LOGS_PATH"
          ssh -i $LOGS_HOST_SSH_KEY $SSH_OPTIONS $LOGS_HOST_USERNAME@$LOGS_HOST "mkdir -p $FULL_LOGS_PATH"

          ./src/opensdn-io/tf-jenkins/jobs/devstack/{deployer}/deploy_platform.sh || res=1
          if [[ $res == 1 ]]; then
            export DEBUG=false
            ./src/opensdn-io/tf-jenkins/jobs/devstack/{deployer}/collect_logs.sh || /bin/true
          fi
          exit $res
    publishers:
      - postbuildscript:
          builders:
            - role: SLAVE
              build-on:
                  - FAILURE
              build-steps:
                  - shell: |
                      export ORCHESTRATOR={orchestrator}
                      source "$WORKSPACE/global.env"
                      source "$WORKSPACE/stackrc.$JOB_NAME.env"
                      source ./src/opensdn-io/tf-jenkins/infra/${{SLAVE}}/definitions
                      ./src/opensdn-io/tf-jenkins/jobs/devstack/{deployer}/remove_workers.sh
      - archive:
          artifacts: '*.env'

- job-template:
    name: deploy-tf-{project}
    description: "devstack deploy TF for {project}"
    defaults: global
    parameters:
      - label:
          name: NODE_NAME
      - string:
          name: STREAM
      - string:
          name: JOB_RND
      - string:
          name: PIPELINE_NAME
      - string:
          name: PIPELINE_NUMBER
    wrappers:
      - workspace-cleanup:
          disable-deferred-wipeout: true
      - timestamps
      - credentials-binding:
          - ssh-user-private-key:
              credential-id: worker
              key-file-variable: WORKER_SSH_KEY
              username-variable: WORKER_USER_NAME
              passphrase-variable: WORKER_PASSPHRASE
      - credentials-binding:
          - ssh-user-private-key:
              credential-id: logs_host
              key-file-variable: LOGS_HOST_SSH_KEY
              username-variable: LOGS_HOST_USERNAME
    scm:
      - tf-jenkins
      - tf-devstack
    builders:
      - copyartifact:
          project: ${{PIPELINE_NAME}}
          filter: "global.env,*.$JOB_RND.env,patchsets-info.json"
          which-build: upstream-build
      - shell: |
          source "$WORKSPACE/global.env"
          desc="Pipeline: ${{PIPELINE_NAME}}-$PIPELINE_NUMBER  Random: ${{JOB_RND}}  Stream: ${{STREAM}}"
          desc+="<br>Job logs: <a href=\"${{LOGS_URL}}/${{STREAM}}\">${{LOGS_URL}}/${{STREAM}}</a>"
          echo "DESCRIPTION $desc"
      - description-setter:
          regexp: "DESCRIPTION (.*)"
      - shell: |
          set -eo pipefail
          source "$WORKSPACE/global.env"
          ./src/opensdn-io/tf-jenkins/infra/gerrit/apply_patchsets.sh ./src tungstenfabric/tf-jenkins ./patchsets-info.json
          ./src/opensdn-io/tf-jenkins/infra/gerrit/apply_patchsets.sh ./src tungstenfabric/tf-devstack ./patchsets-info.json
      - shell: |
          set -eo pipefail
          source "$WORKSPACE/global.env"
          source ./src/opensdn-io/tf-jenkins/infra/${{SLAVE}}/definitions
          source "${{WORKSPACE}}/deps.${{JOB_NAME}}.${{JOB_RND}}.env" || /bin/true
          source "${{WORKSPACE}}/vars.${{JOB_NAME}}.${{JOB_RND}}.env" || /bin/true

          export FULL_LOGS_PATH="$LOGS_PATH/$JOB_LOGS_PATH"
          ./src/opensdn-io/tf-jenkins/jobs/devstack/{deployer}/deploy_tf.sh || res=1
          exit $res
    publishers:
      - archive:
          artifacts: '*.env'

- job:
    name: collect-logs-and-cleanup
    description: "collect all logs for {project}"
    defaults: global
    parameters:
      - label:
          name: NODE_NAME
      - string:
          name: STREAM
      - string:
          name: JOB_RND
      - string:
          name: PIPELINE_NAME
      - string:
          name: PIPELINE_NUMBER
    wrappers:
      - workspace-cleanup:
          disable-deferred-wipeout: true
      - timestamps
      - credentials-binding:
          - ssh-user-private-key:
              credential-id: worker
              key-file-variable: WORKER_SSH_KEY
              username-variable: WORKER_USER_NAME
              passphrase-variable: WORKER_PASSPHRASE
      - credentials-binding:
          - ssh-user-private-key:
              credential-id: logs_host
              key-file-variable: LOGS_HOST_SSH_KEY
              username-variable: LOGS_HOST_USERNAME
      - credentials-binding:
          - text:
              credential-id: OS_USERNAME
              variable: OS_USERNAME
          - text:
              credential-id: OS_PROJECT_ID
              variable: OS_PROJECT_ID
          - text:
              credential-id: OS_PASSWORD
              variable: OS_PASSWORD
          - text:
              credential-id: OS_DOMAIN_NAME
              variable: OS_USER_DOMAIN_NAME
          - text:
              credential-id: OS_DOMAIN_NAME
              variable: OS_PROJECT_DOMAIN_NAME
          - text:
              credential-id: OS_AUTH_URL
              variable: OS_AUTH_URL
    scm:
      - tf-jenkins
      - tf-devstack
    builders:
      - copyartifact:
          project: ${PIPELINE_NAME}
          filter: "global.env,*.$JOB_RND.env,patchsets-info.json"
          which-build: upstream-build
      - shell: |
          source "$WORKSPACE/global.env"
          desc="Pipeline: ${PIPELINE_NAME}-${PIPELINE_NUMBER}  Random: ${JOB_RND}  Stream: ${STREAM}"
          desc+="<br>Job logs: <a href=\"${LOGS_URL}/${STREAM}\">${LOGS_URL}/${STREAM}</a>"
          echo "DESCRIPTION $desc"
      - description-setter:
          regexp: "DESCRIPTION (.*)"
      - shell: |
          source "$WORKSPACE/global.env"
          ./src/opensdn-io/tf-jenkins/infra/gerrit/apply_patchsets.sh ./src tungstenfabric/tf-jenkins ./patchsets-info.json
          ./src/opensdn-io/tf-jenkins/infra/gerrit/apply_patchsets.sh ./src tungstenfabric/tf-devstack ./patchsets-info.json
      - shell: |
          source "$WORKSPACE/global.env"
          source "${WORKSPACE}/deps.${JOB_NAME}.${JOB_RND}.env" || /bin/true
          source "${WORKSPACE}/vars.${JOB_NAME}.${JOB_RND}.env" || /bin/true
          export FULL_LOGS_PATH="${LOGS_PATH}/${JOB_LOGS_PATH}"
          # deploy platform kills env in case of error - skip all things for this case
          # TODO: think how to skip this job for some cases
          if [[ -n "$instance_ip" ]]; then
            if ! "$WORKSPACE/src/opensdn-io/tf-jenkins/jobs/devstack/${DEPLOYER}/collect_logs.sh" ; then
              echo "WARNING: logs couldn't be collected"
            fi
            "$WORKSPACE/src/opensdn-io/tf-jenkins/jobs/devstack/${DEPLOYER}/remove_workers.sh" || /bin/true
          fi
    publishers:
      - archive:
          artifacts: '*.env'

- project:
    name: deploy
    project:
      - k8s-manifests:
          environment_os: centos7
          deployer: k8s_manifests
          orchestrator: kubernetes
      - juju-k8s:
          environment_os: ubuntu20
          deployer: juju
          orchestrator: kubernetes
      - juju-os:
          environment_os: ubuntu20
          deployer: juju
          orchestrator: openstack
      - juju-hybrid:
          environment_os: ubuntu20
          deployer: juju
          orchestrator: hybrid
      - ansible-k8s:
          environment_os: centos7
          deployer: ansible
          orchestrator: kubernetes
      - ansible-os:
          environment_os: centos7
          deployer: ansible
          orchestrator: openstack
      - rhosp16:
          environment_os: rhel82
          deployer: rhosp
          orchestrator: openstack
      - operator:
          environment_os: centos7
          deployer: operator
          orchestrator: kubernetes
    jobs:
      - 'deploy-platform-{project}'
      - 'deploy-tf-{project}'
